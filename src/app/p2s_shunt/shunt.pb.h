// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shunt.proto

#ifndef PROTOBUF_shunt_2eproto__INCLUDED
#define PROTOBUF_shunt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace shunt_alive {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shunt_2eproto();
void protobuf_AssignDesc_shunt_2eproto();
void protobuf_ShutdownFile_shunt_2eproto();

class Alive;

// ===================================================================

class Alive : public ::google::protobuf::MessageLite {
 public:
  Alive();
  virtual ~Alive();

  Alive(const Alive& from);

  inline Alive& operator=(const Alive& from) {
    CopyFrom(from);
    return *this;
  }

  static const Alive& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Alive* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Alive* other);

  // implements Message ----------------------------------------------

  Alive* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Alive& from);
  void MergeFrom(const Alive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 kbps = 2;
  inline bool has_kbps() const;
  inline void clear_kbps();
  static const int kKbpsFieldNumber = 2;
  inline ::google::protobuf::int32 kbps() const;
  inline void set_kbps(::google::protobuf::int32 value);

  // required bool is_connected = 3;
  inline bool has_is_connected() const;
  inline void clear_is_connected();
  static const int kIsConnectedFieldNumber = 3;
  inline bool is_connected() const;
  inline void set_is_connected(bool value);

  // optional int32 pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:shunt_alive.Alive)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_kbps();
  inline void clear_has_kbps();
  inline void set_has_is_connected();
  inline void clear_has_is_connected();
  inline void set_has_pid();
  inline void clear_has_pid();

  ::std::string* id_;
  ::google::protobuf::int32 kbps_;
  bool is_connected_;
  ::google::protobuf::int32 pid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_shunt_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_shunt_2eproto();
  #endif
  friend void protobuf_AssignDesc_shunt_2eproto();
  friend void protobuf_ShutdownFile_shunt_2eproto();

  void InitAsDefaultInstance();
  static Alive* default_instance_;
};
// ===================================================================


// ===================================================================

// Alive

// required bytes id = 1;
inline bool Alive::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alive::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alive::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alive::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Alive::id() const {
  return *id_;
}
inline void Alive::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Alive::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Alive::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Alive::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Alive::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Alive::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 kbps = 2;
inline bool Alive::has_kbps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alive::set_has_kbps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alive::clear_has_kbps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alive::clear_kbps() {
  kbps_ = 0;
  clear_has_kbps();
}
inline ::google::protobuf::int32 Alive::kbps() const {
  return kbps_;
}
inline void Alive::set_kbps(::google::protobuf::int32 value) {
  set_has_kbps();
  kbps_ = value;
}

// required bool is_connected = 3;
inline bool Alive::has_is_connected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alive::set_has_is_connected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Alive::clear_has_is_connected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Alive::clear_is_connected() {
  is_connected_ = false;
  clear_has_is_connected();
}
inline bool Alive::is_connected() const {
  return is_connected_;
}
inline void Alive::set_is_connected(bool value) {
  set_has_is_connected();
  is_connected_ = value;
}

// optional int32 pid = 4;
inline bool Alive::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Alive::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Alive::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Alive::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 Alive::pid() const {
  return pid_;
}
inline void Alive::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shunt_alive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shunt_2eproto__INCLUDED
