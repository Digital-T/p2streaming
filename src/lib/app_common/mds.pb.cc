// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace alive {

void protobuf_ShutdownFile_mds_2eproto() {
  delete mds_Alive::default_instance_;
  delete shunt_Alive::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mds_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  mds_Alive::default_instance_ = new mds_Alive();
  shunt_Alive::default_instance_ = new shunt_Alive();
  mds_Alive::default_instance_->InitAsDefaultInstance();
  shunt_Alive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mds_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mds_2eproto_once_);
void protobuf_AddDesc_mds_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mds_2eproto_once_, 
                 &protobuf_AddDesc_mds_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mds_2eproto {
  StaticDescriptorInitializer_mds_2eproto() {
    protobuf_AddDesc_mds_2eproto();
  }
} static_descriptor_initializer_mds_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int mds_Alive::kTypeFieldNumber;
const int mds_Alive::kIdFieldNumber;
const int mds_Alive::kChannelBitrateFieldNumber;
const int mds_Alive::kOutKbpsFieldNumber;
const int mds_Alive::kClientCountFieldNumber;
const int mds_Alive::kP2PEfficientFieldNumber;
const int mds_Alive::kPlayingQualityFieldNumber;
const int mds_Alive::kGlobalRemoteToLocalLostRateFieldNumber;
#endif  // !_MSC_VER

mds_Alive::mds_Alive()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void mds_Alive::InitAsDefaultInstance() {
}

mds_Alive::mds_Alive(const mds_Alive& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void mds_Alive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_bitrate_ = 0;
  out_kbps_ = 0;
  client_count_ = 0;
  p2p_efficient_ = 0;
  playing_quality_ = 0;
  global_remote_to_local_lost_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mds_Alive::~mds_Alive() {
  SharedDtor();
}

void mds_Alive::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void mds_Alive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const mds_Alive& mds_Alive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mds_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mds_2eproto();
#endif
  return *default_instance_;
}

mds_Alive* mds_Alive::default_instance_ = NULL;

mds_Alive* mds_Alive::New() const {
  return new mds_Alive;
}

void mds_Alive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    channel_bitrate_ = 0;
    out_kbps_ = 0;
    client_count_ = 0;
    p2p_efficient_ = 0;
    playing_quality_ = 0;
    global_remote_to_local_lost_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool mds_Alive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required bytes id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_bitrate;
        break;
      }

      // required int32 channel_bitrate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_bitrate_)));
          set_has_channel_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_kbps;
        break;
      }

      // required int32 out_kbps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_kbps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_kbps_)));
          set_has_out_kbps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_count;
        break;
      }

      // required int32 client_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_count_)));
          set_has_client_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_p2p_efficient;
        break;
      }

      // required float p2p_efficient = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p2p_efficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p2p_efficient_)));
          set_has_p2p_efficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_playing_quality;
        break;
      }

      // optional float playing_quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playing_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playing_quality_)));
          set_has_playing_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_global_remote_to_local_lost_rate;
        break;
      }

      // optional float global_remote_to_local_lost_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_global_remote_to_local_lost_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_remote_to_local_lost_rate_)));
          set_has_global_remote_to_local_lost_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mds_Alive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->id(), output);
  }

  // required int32 channel_bitrate = 3;
  if (has_channel_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_bitrate(), output);
  }

  // required int32 out_kbps = 4;
  if (has_out_kbps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->out_kbps(), output);
  }

  // required int32 client_count = 5;
  if (has_client_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->client_count(), output);
  }

  // required float p2p_efficient = 6;
  if (has_p2p_efficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->p2p_efficient(), output);
  }

  // optional float playing_quality = 7;
  if (has_playing_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->playing_quality(), output);
  }

  // optional float global_remote_to_local_lost_rate = 8;
  if (has_global_remote_to_local_lost_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->global_remote_to_local_lost_rate(), output);
  }

}

int mds_Alive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bytes id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required int32 channel_bitrate = 3;
    if (has_channel_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_bitrate());
    }

    // required int32 out_kbps = 4;
    if (has_out_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_kbps());
    }

    // required int32 client_count = 5;
    if (has_client_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_count());
    }

    // required float p2p_efficient = 6;
    if (has_p2p_efficient()) {
      total_size += 1 + 4;
    }

    // optional float playing_quality = 7;
    if (has_playing_quality()) {
      total_size += 1 + 4;
    }

    // optional float global_remote_to_local_lost_rate = 8;
    if (has_global_remote_to_local_lost_rate()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mds_Alive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const mds_Alive*>(&from));
}

void mds_Alive::MergeFrom(const mds_Alive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_channel_bitrate()) {
      set_channel_bitrate(from.channel_bitrate());
    }
    if (from.has_out_kbps()) {
      set_out_kbps(from.out_kbps());
    }
    if (from.has_client_count()) {
      set_client_count(from.client_count());
    }
    if (from.has_p2p_efficient()) {
      set_p2p_efficient(from.p2p_efficient());
    }
    if (from.has_playing_quality()) {
      set_playing_quality(from.playing_quality());
    }
    if (from.has_global_remote_to_local_lost_rate()) {
      set_global_remote_to_local_lost_rate(from.global_remote_to_local_lost_rate());
    }
  }
}

void mds_Alive::CopyFrom(const mds_Alive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mds_Alive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mds_Alive::Swap(mds_Alive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(channel_bitrate_, other->channel_bitrate_);
    std::swap(out_kbps_, other->out_kbps_);
    std::swap(client_count_, other->client_count_);
    std::swap(p2p_efficient_, other->p2p_efficient_);
    std::swap(playing_quality_, other->playing_quality_);
    std::swap(global_remote_to_local_lost_rate_, other->global_remote_to_local_lost_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string mds_Alive::GetTypeName() const {
  return "alive.mds_Alive";
}


// ===================================================================

#ifndef _MSC_VER
const int shunt_Alive::kIdFieldNumber;
const int shunt_Alive::kKbpsFieldNumber;
const int shunt_Alive::kIsConnectedFieldNumber;
const int shunt_Alive::kPidFieldNumber;
#endif  // !_MSC_VER

shunt_Alive::shunt_Alive()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void shunt_Alive::InitAsDefaultInstance() {
}

shunt_Alive::shunt_Alive(const shunt_Alive& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void shunt_Alive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kbps_ = 0;
  is_connected_ = false;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shunt_Alive::~shunt_Alive() {
  SharedDtor();
}

void shunt_Alive::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void shunt_Alive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const shunt_Alive& shunt_Alive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mds_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mds_2eproto();
#endif
  return *default_instance_;
}

shunt_Alive* shunt_Alive::default_instance_ = NULL;

shunt_Alive* shunt_Alive::New() const {
  return new shunt_Alive;
}

void shunt_Alive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    kbps_ = 0;
    is_connected_ = false;
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool shunt_Alive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kbps;
        break;
      }

      // required int32 kbps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kbps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kbps_)));
          set_has_kbps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_connected;
        break;
      }

      // required bool is_connected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_connected_)));
          set_has_is_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pid;
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shunt_Alive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->id(), output);
  }

  // required int32 kbps = 2;
  if (has_kbps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kbps(), output);
  }

  // required bool is_connected = 3;
  if (has_is_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_connected(), output);
  }

  // optional int32 pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

}

int shunt_Alive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required int32 kbps = 2;
    if (has_kbps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kbps());
    }

    // required bool is_connected = 3;
    if (has_is_connected()) {
      total_size += 1 + 1;
    }

    // optional int32 pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shunt_Alive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const shunt_Alive*>(&from));
}

void shunt_Alive::MergeFrom(const shunt_Alive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kbps()) {
      set_kbps(from.kbps());
    }
    if (from.has_is_connected()) {
      set_is_connected(from.is_connected());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
}

void shunt_Alive::CopyFrom(const shunt_Alive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shunt_Alive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void shunt_Alive::Swap(shunt_Alive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kbps_, other->kbps_);
    std::swap(is_connected_, other->is_connected_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string shunt_Alive::GetTypeName() const {
  return "alive.shunt_Alive";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace alive

// @@protoc_insertion_point(global_scope)
