IF(MSVC)
	  UNSET(OPENSSL_SLN CACHE)
	  UNSET(OPENSSL_VSPROJECTS_DIR CACHE)
	  FIND_FILE(OPENSSL_SLN NAMES openssl.sln PATHS ${OPENSSL_SOURCE_DIR}/vsprojects NO_DEFAULT_PATH)
	  IF(NOT OPENSSL_SLN)
		SET(ERROR_MESSAGE "\nCould not find Openssl source.\n")
		SET(ERROR_MESSAGE "${ERROR_MESSAGE}Using -DOPENSSL_SOURCE_DIR=\"the openssl source\".")
		SET(ERROR_MESSAGE "${ERROR_MESSAGE}You can download it at http://code.google.com/p/openssl\n")
		MESSAGE(FATAL_ERROR "${ERROR_MESSAGE}")
	  ENDIF()
	  GET_FILENAME_COMPONENT(OPENSSL_VSPROJECTS_DIR ${OPENSSL_SLN} PATH)
	  MESSAGE("-- Upgrading Openssl solution")
	  EXECUTE_PROCESS(COMMAND devenv ${OPENSSL_SLN} /Upgrade OUTPUT_VARIABLE OUTVAR RESULT_VARIABLE RESVAR)
	  IF(NOT ${RESVAR} EQUAL 0)
		MESSAGE("${OUTVAR}")
	  ENDIF()
	  MESSAGE("-- Building Openssl debug libraries")
	  EXECUTE_PROCESS(COMMAND devenv ${OPENSSL_SLN} /Build "Debug|Win32" /Project libopenssl OUTPUT_VARIABLE OUTVAR RESULT_VARIABLE RESVAR)
	  IF(NOT ${RESVAR} EQUAL 0)
		MESSAGE("${OUTVAR}")
	  ENDIF()
		MESSAGE("-- Building Openssl release libraries and compiler")
	  EXECUTE_PROCESS(COMMAND devenv ${OPENSSL_SLN} /Build "Release|Win32" /Project protoc OUTPUT_VARIABLE OUTVAR RESULT_VARIABLE RESVAR)
	  IF(NOT ${RESVAR} EQUAL 0)
		MESSAGE("${OUTVAR}")
	  ENDIF()
	  EXECUTE_PROCESS(COMMAND CMD /C CALL extract_includes.bat WORKING_DIRECTORY ${OPENSSL_VSPROJECTS_DIR} OUTPUT_VARIABLE OUTVAR RESULT_VARIABLE RESVAR)
	  IF(NOT ${RESVAR} EQUAL 0)
		MESSAGE("${OUTVAR}")
	  ENDIF()
	  GET_FILENAME_COMPONENT(OPENSSL_ROOT_DIR ${OPENSSL_VSPROJECTS_DIR} PATH)
ELSE()
	  UNSET(OPENSSL_CONFIGURE CACHE)
	  SET(OPENSSL_SRC_DIR ${OPENSSL_SOURCE_DIR})
	  FIND_FILE(OPENSSL_CONFIG include/openssl/opensslconf.h PATHS ${OPENSSL_SRC_DIR} NO_DEFAULT_PATH)
	  IF(NOT OPENSSL_CONFIG)
		SET(ERROR_MESSAGE "\nCould not find Openssl source.\n")
		MESSAGE(FATAL_ERROR ${ERROR_MESSAGE})
	  ENDIF()

	if(OPENSSL_SRC_DIR)
		MESSAGE("-- Generating configure file for openssl")
		MESSAGE("     This may take a few minutes...")
		SET(OPENSSL_SRC_PATH_DESCRIPTION "The Directory containing the openssl src files was not found. Please Use cmake -DOPENSSL_SOURCE_DIR=\"your_boost_dir\" ...") 
		SET(OPENSSL_LIB libssl.a)
		find_path(OPENSSL_LIB_DIR ${OPENSSL_LIB}
		      ${PREFIX}/lib
		      NO_DEFAULT_PATH
		      )
		if(NOT OPENSSL_LIB_DIR)
			execute_process(COMMAND make distclean WORKING_DIRECTORY ${OPENSSL_SRC_DIR})
			if(${CMAKE_C_COMPILER} EQUAL gcc)
				execute_process(COMMAND ${OPENSSL_SRC_DIR}/config 
					--prefix=${PREFIX}
					WORKING_DIRECTORY ${OPENSSL_SRC_DIR}
					shared zlib-dynamic enable-camellia
					) 
			else(${CMAKE_C_COMPILER} EQUAL gcc)
				execute_process(COMMAND ${OPENSSL_SRC_DIR}/Configure 
					os:${PLATFORM} compiler:${CMAKE_C_COMPILER}
					--prefix=${PREFIX}
					WORKING_DIRECTORY ${OPENSSL_SRC_DIR}
					) 
			endif(${CMAKE_C_COMPILER} EQUAL gcc)
			#execute_process(COMMAND make depend WORKING_DIRECTORY ${OPENSSL_SRC_DIR}) 	
			execute_process(COMMAND make clean WORKING_DIRECTORY ${OPENSSL_SRC_DIR})
			execute_process(COMMAND make libssl crypto WORKING_DIRECTORY ${OPENSSL_SRC_DIR}) 	
			execute_process(COMMAND make install WORKING_DIRECTORY ${OPENSSL_SRC_DIR}) 
		endif(NOT OPENSSL_LIB_DIR)
	else(OPENSSL_SRC_DIR)
		message(SEND_ERROR ${OPENSSL_SRC_PATH_DESCRIPTION})
	endif(OPENSSL_SRC_DIR)
ENDIF()